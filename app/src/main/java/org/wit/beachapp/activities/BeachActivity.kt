package org.wit.beachapp.activities

import android.content.Intent
import android.net.Uri
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import com.google.android.material.snackbar.Snackbar
import org.wit.beachapp.main.MainApp
import org.wit.beachapp.models.BeachModel
import org.wit.beachapp.R
import android.view.Menu
import android.view.MenuItem
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import com.squareup.picasso.Picasso
import org.wit.beachapp.databinding.ActivityBeachBinding
import org.wit.beachapp.helpers.showImagePicker
import org.wit.beachapp.models.Location
import timber.log.Timber.i

class BeachActivity : AppCompatActivity() {
    //Using autogenerated class to access view objects of the layout.
    private lateinit var binding: ActivityBeachBinding
    //Creating a beach as a class member of BeachModel()
    var beach = BeachModel()
    //Retrieving and storing reference to MainApp object where Beach list is.
    lateinit var app: MainApp
    //Launch image activity
    private lateinit var imageIntentLauncher : ActivityResultLauncher<Intent>
    //Launch map activity
    private lateinit var mapIntentLauncher : ActivityResultLauncher<Intent>
    var edit = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //Inflate layout
        binding = ActivityBeachBinding.inflate(layoutInflater)
        setContentView(binding.root)
        //Enable tool bar
        binding.toolbarAdd.title = title
        setSupportActionBar(binding.toolbarAdd)
        //Initialise MainApp.
        app = application as MainApp

        //Editing existing beach
        if (intent.hasExtra("beach_edit")) {
            edit = true
            //Retrieves selected beach.
            beach = intent.extras?.getParcelable("beach_edit")!!
            binding.beachTitle.setText(beach.title)
            binding.description.setText(beach.description)
            //Bind button to 'Save Beach'
            binding.btnAdd.setText(R.string.save_beach)
            //Display image
            Picasso.get()
                .load(beach.image)
                .into(binding.beachImage)
            if (beach.image != Uri.EMPTY) {
                binding.chooseImage.setText(R.string.change_beach_image)
            }
        }

        //Event handling - Add a Beach
        binding.btnAdd.setOnClickListener() {
            beach.title = binding.beachTitle.text.toString()
            beach.description = binding.description.text.toString()
            beach.size = binding.size.text.toString()
            //Data validation using Snackbar for message
            if (beach.title.isEmpty()) {
                Snackbar.make(it,R.string.enter_beach_title, Snackbar.LENGTH_LONG).show()
            } else {
                //Using beach.copy to create multiple different beaches to file from MainApp
                if (edit) {
                    app.beaches.update(beach.copy())
                } else {
                    app.beaches.create(beach.copy())
                }
            }
            setResult(RESULT_OK)
            finish()
        }

        //Event handling - Add image
        binding.chooseImage.setOnClickListener {
            showImagePicker(imageIntentLauncher)
        }

        //Event handling - Add location
        binding.beachLocation.setOnClickListener {
            val location = Location(52.245696, -7.139102, 15f)
            if (beach.zoom != 0f) {
                location.lat =  beach.lat
                location.lng = beach.lng
                location.zoom = beach.zoom
            }
            val launcherIntent = Intent(this, MapActivity::class.java)
                .putExtra("location", location)
            mapIntentLauncher.launch(launcherIntent)
        }
        registerImagePickerCallback()
        registerMapCallback()
    }


    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        //Inflate menu
        menuInflater.inflate(R.menu.menu_beach, menu)
        if (edit) menu.getItem(0).isVisible = true
        return super.onCreateOptionsMenu(menu)
    }

    //Handle cancel event
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.item_delete -> {
                app.beaches.delete(beach)
                finish()
            }
            R.id.item_cancel -> {
                finish()
            }
        }
        return super.onOptionsItemSelected(item)
    }

    //Image Picker
    private fun registerImagePickerCallback() {
        imageIntentLauncher =
            registerForActivityResult(ActivityResultContracts.StartActivityForResult())
            { result ->
                when(result.resultCode){
                    RESULT_OK -> {
                        if (result.data != null) {
                            i("Got Result ${result.data!!.data}")
                            beach.image = result.data!!.data!!
                            //Display image
                            Picasso.get()
                                .load(beach.image)
                                .into(binding.beachImage)
                            binding.chooseImage.setText(R.string.change_beach_image)
                        } // end of if
                    }
                    RESULT_CANCELED -> { } else -> { }
                }
            }
    }

    private fun registerMapCallback() {
        mapIntentLauncher =
            registerForActivityResult(ActivityResultContracts.StartActivityForResult())
            { result ->
                when (result.resultCode) {
                    RESULT_OK -> {
                        if (result.data != null) {
                            i("Got Location ${result.data.toString()}")
                            val location = result.data!!.extras?.getParcelable<Location>("location")!!
                            i("Location == $location")
                            beach.lat = location.lat
                            beach.lng = location.lng
                            beach.zoom = location.zoom
                        } // end of if
                    }
                    RESULT_CANCELED -> { } else -> { }
                }
            }
    }
}