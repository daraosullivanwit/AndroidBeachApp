package org.wit.beachapp.activities

import android.content.Intent
import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import android.widget.ImageButton
import android.widget.Switch
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.app.AppCompatDelegate
import androidx.recyclerview.widget.LinearLayoutManager
import org.wit.beachapp.R
import org.wit.beachapp.adapters.BeachAdapter
import org.wit.beachapp.adapters.BeachListener
import org.wit.beachapp.databinding.ActivityBeachListBinding
import org.wit.beachapp.main.MainApp
import org.wit.beachapp.models.BeachModel

//To present the list of Beaches. Launch page.
class BeachListActivity : AppCompatActivity(), BeachListener/*, MultiplePermissionsListener*/  {
    //Retrieving and storing reference to MainApp object.
    lateinit var app: MainApp
    //Using autogenerated class to access view objects of the layout.
    private lateinit var binding: ActivityBeachListBinding
    private lateinit var refreshIntentLauncher : ActivityResultLauncher<Intent>
    private lateinit var mapIntentLauncher : ActivityResultLauncher<Intent>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //Inflate layout
        binding = ActivityBeachListBinding.inflate(layoutInflater)
        setContentView(binding.root)
        //Enable action bar and give it title.
        binding.toolbar.title = title
        setSupportActionBar(binding.toolbar)
        app = application as MainApp
        val layoutManager = LinearLayoutManager(this)
        //Binding to view
        binding.recyclerView.layoutManager = layoutManager
        //Night mode switch handling
        val btn = findViewById<Switch>(R.id.switch1)
        btn.setOnCheckedChangeListener { _, isChecked ->
            if (btn.isChecked) {
                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)
                btn.text = "Disable dark mode"
            } else {
                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)
                btn.text = "Enable dark mode"
            }
        }
        loadBeaches()
        registerRefreshCallback()
        registerMapCallback()
    }

    //Override method to load menu resource.
    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.menu_main, menu)
        return super.onCreateOptionsMenu(menu)
    }

    //Implements menu event handler and if event is item_add, BeachActivity is started.
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.item_add -> {
                val launcherIntent = Intent(this, BeachActivity::class.java)
                refreshIntentLauncher.launch(launcherIntent)
            }
            R.id.item_map -> {
                val launcherIntent = Intent(this, BeachMapsActivity::class.java)
                mapIntentLauncher.launch(launcherIntent)
            }
            R.id.item_visited -> {
                val launcherIntent = Intent(this, VisitedActivity::class.java)
                refreshIntentLauncher.launch(launcherIntent)
            }
            R.id.item_tovisit -> {
                val launcherIntent = Intent(this, ToVisitActivity::class.java)
                refreshIntentLauncher.launch(launcherIntent)
            }
        }
        return super.onOptionsItemSelected(item)
    }

    //Implements BeachListener interface.
    override fun onBeachClick(beach: BeachModel) {
        val launcherIntent = Intent(this, BeachActivity::class.java)
        //Pass selected beach to the activity.
        launcherIntent.putExtra("beach_edit", beach)
        refreshIntentLauncher.launch(launcherIntent)
    }

    private fun registerRefreshCallback() {
        refreshIntentLauncher =
            registerForActivityResult(ActivityResultContracts.StartActivityForResult())
            { loadBeaches() }
    }

    private fun registerMapCallback() {
        mapIntentLauncher =
            registerForActivityResult(ActivityResultContracts.StartActivityForResult())
            {  }
    }

    private fun loadBeaches() {
        showBeaches(app.beaches.findAll())
    }

    fun showBeaches (beaches: List<BeachModel>) {
        binding.recyclerView.adapter = BeachAdapter(beaches, this)
        binding.recyclerView.adapter?.notifyDataSetChanged()
    }
}